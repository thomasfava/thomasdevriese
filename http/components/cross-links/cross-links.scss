@import "sass-essentials";

.cross-links {
  // Variables
  $border-size: 0.1rem;
  $corner-size: 2.8rem;

  // Calculated
  $squareroot:  ($border-size / 1rem * $border-size / 1rem / 2);
  $pythagoras:  ((sqrt($squareroot) * 1rem) + $corner-size);
  //$pythagoras-inner: ($corner-size - ((sqrt($squareroot) * 1rem)));

  // Declarations
  @include reset-list;

  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(14rem, 1fr));
  grid-auto-flow: dense;
  max-inline-size: 58rem;
  gap: 3.6rem clamp(2.4rem, 4vw, 3.6rem);
  margin-block: 4.8rem 3.2rem;

  // Children
  &__item {
    display: inline-block;
    margin: 0;
  }

  &__link {
    @include transition(cosmetic);

    position: relative;
    display: block;
    padding: 3.2rem;
    filter: drop-shadow(0 0 0.3rem rgba(red($darkpetrol), green($darkpetrol), blue($darkpetrol), 0.1));
    border: $border-size solid var(--fava-border);

    @supports (clip-path: initial) {
      border: none;
      padding: $border-size + 3.2rem;
    }

    &::before {
      // Pseudo background
      @include transition(cosmetic);

      content: '';
      position: absolute;
      inset: 0;
      z-index: -1;
      background-color: var(--fava-background);

      .cross-links__item:nth-child(odd) & {
        // Bottom right corner
        clip-path: polygon(0 0, 100% 0, 100% calc(100% - #{$pythagoras}), calc(100% - #{$pythagoras}) 100%, 0 100%);
      }

      .cross-links__item:nth-child(even) & {
        // Top left corner
        clip-path: polygon($pythagoras 0, 100% 0, 100% 100%, 0 100%, 0 $pythagoras);
      }
    }

    &::after {
      // Pseudo border
      @include transition(cosmetic);

      @supports (clip-path: initial) {
        content: '';
        position: absolute;
        inset: 0;
        z-index: -1;
        background-color: var(--fava-border);
      }

      .cross-links__item:nth-child(odd) & {
        // Bottom right corner
        clip-path: polygon(0 0, 0 100%, $border-size 100%, $border-size $border-size, calc(100% - #{$border-size}) $border-size, calc(100% - #{$border-size}) calc(100% - #{$pythagoras}), calc(100% - #{$pythagoras}) calc(100% - #{$border-size}), $border-size calc(100% - #{$border-size}), $border-size 100%, calc(100% - #{$corner-size}) 100%, 100% calc(100% - #{$corner-size}), 100% 0);
      }

      .cross-links__item:nth-child(even) & {
        // Top left corner
        clip-path: polygon(0 $corner-size, 0 100%, $border-size 100%, $border-size $pythagoras, $pythagoras $border-size, calc(100% - #{$border-size}) $border-size, calc(100% - #{$border-size}) calc(100% - #{$border-size}), $border-size calc(100% - #{$border-size}), $border-size 100%, 100% 100%, 100% 0, $corner-size 0);
      }
    }

    > * {
      @include transition(all);
    }

    &:active,
    &:focus,
    &:focus-within,
    &:hover {
      border-color: $petrol;
      transform: translateY(-0.1rem);

      @media (prefers-reduced-motion: reduce) {
        transform: translateY(0);
      }

      > *  {
        transform: scale(1.08);

        @media (prefers-reduced-motion: reduce) {
          transform: scale(1);
        }
      }

      &::before {
        background-color: var(--fava-background-focus);
      }

      &::after {
        @supports (clip-path: initial) {
          background-color: var(--fava-border-active);
        }
      }
    }

    &:focus-within,
    &:focus {
      filter: drop-shadow(0 0 0.3rem rgba(red($petrol), green($petrol), blue($petrol), 0.3));

      &:not(:focus-visible) {
        &::before {
          background-color: var(--fava-background-active);
        }
      }
    }
  }

  &__text {
    @include visually-hidden();
  }

  .icon {
    inline-size: auto;
    max-inline-size: 7.6rem;
  }
}
